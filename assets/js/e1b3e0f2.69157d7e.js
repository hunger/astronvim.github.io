"use strict";(self.webpackChunkastro_vim=self.webpackChunkastro_vim||[]).push([[43659],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>y});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)t=l[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(t),m=a,y=u["".concat(s,".").concat(m)]||u[m]||f[m]||l;return t?r.createElement(y,i(i({ref:n},p),{},{components:t})):r.createElement(y,i({ref:n},p))}));function y(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,i=new Array(l);i[0]=m;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[u]="string"==typeof e?e:a,i[1]=o;for(var c=2;c<l;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},21068:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>f,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var r=t(87462),a=(t(67294),t(3905));const l={id:"yaml_ansible",title:"YAML (Ansible)"},i=void 0,o={unversionedId:"Recipes/yaml_ansible",id:"version-3.10.0/Recipes/yaml_ansible",title:"YAML (Ansible)",description:"When installed, ansible-language-server is invoked on .yaml files where filetype=yaml.ansible. Rather than setting this manually each time,",source:"@site/versioned_docs/version-3.10.0/Recipes/yaml_ansible.md",sourceDirName:"Recipes",slug:"/Recipes/yaml_ansible",permalink:"/Recipes/yaml_ansible",draft:!1,tags:[],version:"3.10.0",frontMatter:{id:"yaml_ansible",title:"YAML (Ansible)"},sidebar:"docs",previous:{title:"Unattended Installation",permalink:"/Recipes/unattended_install"},next:{title:"Acknowledgements",permalink:"/acknowledgements"}},s={},c=[],p={toc:c},u="wrapper";function f(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"When installed, ",(0,a.kt)("inlineCode",{parentName:"p"},"ansible-language-server")," is invoked on .yaml files where ",(0,a.kt)("inlineCode",{parentName:"p"},"filetype=yaml.ansible"),". Rather than setting this manually each time,\nwe can leverage our polish function to set the filetype based on standard Ansible filesystem patterns."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'return {\n  polish = function()\n    local function yaml_ft(path, bufnr)\n      -- get content of buffer as string\n      local content = vim.filetype.getlines(bufnr)\n      if type(content) == "table" then content = table.concat(content, "\\n") end\n\n      -- check if file is in roles, tasks, or handlers folder\n      local path_regex = vim.regex "(tasks\\\\|roles\\\\|handlers)/"\n      if path_regex and path_regex:match_str(path) then return "yaml.ansible" end\n      -- check for known ansible playbook text and if found, return yaml.ansible\n      local regex = vim.regex "hosts:\\\\|tasks:"\n      if regex and regex:match_str(content) then return "yaml.ansible" end\n\n      -- return yaml if nothing else\n      return "yaml"\n    end\n\n    vim.filetype.add {\n      extension = {\n        yml = yaml_ft,\n        yaml = yaml_ft,\n      },\n    }\n  end,\n}\n')))}f.isMDXComponent=!0}}]);